/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.abnamro.empersistenceservice.generated.api;

import com.abnamro.empersistenceservice.generated.model.CreateUpdateEmployeeRequest;
import com.abnamro.empersistenceservice.generated.model.ErrorResponse;
import com.abnamro.empersistenceservice.generated.model.GetEmployeeResultOk;
import com.abnamro.empersistenceservice.generated.model.SuccessResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-13T16:50:30.255967+01:00[Europe/Amsterdam]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "EmployeeManagementService", description = "Employee Persistence Service API")
public interface EmployeeManagementServiceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /api/employees/{id}
     * Delete an employee 
     *
     * @param id ID of employee (required)
     * @return Ok Result (status code 200)
     *         or Bad request response (status code 400)
     *         or Not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiEmployeesIdDelete",
        description = "Delete an employee ",
        tags = { "EmployeeManagementService", "DEL" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok Result", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @Parameters({
        @Parameter(name = "x-api-key", description = "your api key for Employee Persistence Service", required = true, in = ParameterIn.HEADER),
        @Parameter(name = "Role", description = "Role of the user", required = true, in = ParameterIn.HEADER)
    })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/employees/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SuccessResponse> apiEmployeesIdDelete(
        @Parameter(name = "id", description = "ID of employee", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorMessages\" : [ \"Field 'name' is required.\", \"Field 'age' must be a positive string.\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/employees/{id}
     * Retrieves employees by id 
     *
     * @param id ID of employee (required)
     * @return Ok Result (status code 200)
     *         or Bad request response (status code 400)
     *         or Not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiEmployeesIdGet",
        description = "Retrieves employees by id ",
        tags = { "EmployeeManagementService", "GET" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok Result", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetEmployeeResultOk.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @Parameters({
        @Parameter(name = "x-api-key", description = "your api key for Employee Persistence Service", required = true, in = ParameterIn.HEADER),
        @Parameter(name = "Role", description = "Role of the user", required = true, in = ParameterIn.HEADER)
    })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/employees/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetEmployeeResultOk> apiEmployeesIdGet(
        @Parameter(name = "id", description = "ID of employee", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role_id\" : 6, \"surname\" : \"surname\", \"id\" : 0, \"first_name\" : \"first_name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorMessages\" : [ \"Field 'name' is required.\", \"Field 'age' must be a positive string.\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/employees/{id}
     * Update an employee 
     *
     * @param id ID of employee (required)
     * @param createUpdateEmployeeRequest Request to create an employee (required)
     * @return Ok Result (status code 200)
     *         or Bad request response (status code 400)
     *         or Not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiEmployeesIdPut",
        description = "Update an employee ",
        tags = { "EmployeeManagementService", "PUT" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok Result", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetEmployeeResultOk.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @Parameters({
        @Parameter(name = "x-api-key", description = "your api key for Employee Persistence Service", required = true, in = ParameterIn.HEADER),
        @Parameter(name = "Role", description = "Role of the user", required = true, in = ParameterIn.HEADER)
    })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/employees/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetEmployeeResultOk> apiEmployeesIdPut(
        @Parameter(name = "id", description = "ID of employee", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "CreateUpdateEmployeeRequest", description = "Request to create an employee", required = true) @Valid @RequestBody CreateUpdateEmployeeRequest createUpdateEmployeeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role_id\" : 6, \"surname\" : \"surname\", \"id\" : 0, \"first_name\" : \"first_name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorMessages\" : [ \"Field 'name' is required.\", \"Field 'age' must be a positive string.\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/employees
     * Create an employee 
     *
     * @param createUpdateEmployeeRequest Request to create an employee (required)
     * @return Ok Result (status code 200)
     *         or Bad request response (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiEmployeesPost",
        description = "Create an employee ",
        tags = { "EmployeeManagementService", "POST" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok Result", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetEmployeeResultOk.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @Parameters({
        @Parameter(name = "x-api-key", description = "your api key for Employee Persistence Service", required = true, in = ParameterIn.HEADER),
        @Parameter(name = "Role", description = "Role of the user", required = true, in = ParameterIn.HEADER)
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/employees",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetEmployeeResultOk> apiEmployeesPost(
        @Parameter(name = "CreateUpdateEmployeeRequest", description = "Request to create an employee", required = true) @Valid @RequestBody CreateUpdateEmployeeRequest createUpdateEmployeeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role_id\" : 6, \"surname\" : \"surname\", \"id\" : 0, \"first_name\" : \"first_name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorMessages\" : [ \"Field 'name' is required.\", \"Field 'age' must be a positive string.\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
